# Docker 構建與部署範本
#
# 用途：自動構建 Docker 映像並推送到 Registry，然後部署到目標環境
# 適用場景：容器化應用的 CI/CD
#
# 使用方式：
# 1. 複製此檔案到 .github/workflows/
# 2. 根據專案需求調整配置
# 3. 設定必要的 GitHub Secrets

name: Docker Build & Deploy

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:  # 允許手動觸發

# 設定權限（推送到 GHCR 需要）
permissions:
  contents: read
  packages: write

env:
  # 配置 Registry（可選擇不同的 Registry）
  REGISTRY: ghcr.io
  # 映像名稱（自動使用 repository 名稱）
  IMAGE_NAME: ${{ github.repository }}

jobs:
  #━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
  # Job 1: 構建 Docker 映像
  #━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
  build:
    name: Build Docker Image
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # 提取 metadata（tags, labels）
      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            # Git SHA（短版）
            type=sha,prefix={{branch}}-,format=short
            # 分支名稱
            type=ref,event=branch
            # PR 編號
            type=ref,event=pr
            # Latest（只在 main 分支）
            type=raw,value=latest,enable={{is_default_branch}}
            # 語義化版本（如果有 tag）
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: ${{ github.event_name != 'pull_request' }}  # PR 不推送
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          # 快取策略（大幅加速構建）
          cache-from: type=gha
          cache-to: type=gha,mode=max
          # 建立 provenance（供應鏈安全）
          provenance: true
          sbom: true

      - name: Show image digest
        run: |
          echo "Image pushed successfully!"
          echo "Digest: ${{ steps.build.outputs.digest }}"
          echo "Tags: ${{ steps.meta.outputs.tags }}"

  #━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
  # Job 2: 容器安全掃描
  #━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
  scan:
    name: Container Security Scan
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name != 'pull_request'

    steps:
      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.ref_name }}-${{ github.sha }}
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'
          exit-code: '1'  # 發現漏洞時失敗

      - name: Upload Trivy results to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  #━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
  # Job 3: 部署到開發環境
  #━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
  deploy-dev:
    name: Deploy to Development
    runs-on: ubuntu-latest
    needs: [build, scan]
    if: github.ref == 'refs/heads/develop'
    environment:
      name: development
      url: https://dev.example.com

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # 方式 1：使用 SSH 部署到遠端伺服器
      - name: Deploy via SSH
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.DEV_HOST }}
          username: ${{ secrets.DEV_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            cd /app
            docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:develop-${{ github.sha }}
            docker-compose down
            docker-compose up -d
            docker image prune -f

      # 方式 2：部署到雲端服務（以 Railway 為例）
      # - name: Deploy to Railway
      #   uses: bervProject/railway-deploy@main
      #   with:
      #     railway_token: ${{ secrets.RAILWAY_TOKEN }}
      #     service: my-service

      - name: Wait for deployment
        run: sleep 20

      - name: Health check
        run: |
          for i in {1..10}; do
            if curl -f https://dev.example.com/health; then
              echo "✅ Health check passed"
              exit 0
            fi
            echo "Attempt $i failed, retrying..."
            sleep 10
          done
          echo "❌ Health check failed"
          exit 1

  #━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
  # Job 4: 部署到生產環境
  #━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
  deploy-prod:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build, scan]
    if: github.ref == 'refs/heads/main'
    environment:
      name: production
      url: https://app.example.com

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # 記錄當前運行的版本（用於回退）
      - name: Save current version
        id: current
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.PROD_HOST }}
          username: ${{ secrets.PROD_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            docker ps --format '{{.Image}}' | grep ${{ env.IMAGE_NAME }} | head -1 > /tmp/previous_version.txt
            cat /tmp/previous_version.txt

      # 藍綠部署：部署到 blue 環境
      - name: Deploy to blue environment
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.PROD_HOST }}
          username: ${{ secrets.PROD_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            cd /app
            docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:main-${{ github.sha }}
            docker-compose -f docker-compose.blue.yml down
            IMAGE_TAG=main-${{ github.sha }} docker-compose -f docker-compose.blue.yml up -d

      - name: Wait for blue environment
        run: sleep 30

      # 健康檢查 blue 環境
      - name: Health check blue environment
        id: health
        run: |
          for i in {1..15}; do
            if curl -f https://blue.app.example.com/health; then
              echo "✅ Blue environment healthy"
              echo "healthy=true" >> $GITHUB_OUTPUT
              exit 0
            fi
            echo "Attempt $i failed, retrying..."
            sleep 10
          done
          echo "❌ Blue environment unhealthy"
          echo "healthy=false" >> $GITHUB_OUTPUT
          exit 1

      # 切換流量到 blue
      - name: Switch traffic to blue
        if: steps.health.outputs.healthy == 'true'
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.PROD_HOST }}
          username: ${{ secrets.PROD_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            # 更新 Nginx/Load Balancer 配置
            /app/scripts/switch-to-blue.sh

      # 驗證生產環境
      - name: Verify production
        run: |
          sleep 10
          if ! curl -f https://app.example.com/health; then
            echo "❌ Production verification failed"
            exit 1
          fi
          echo "✅ Production deployment successful"

      # 清理舊的 green 環境
      - name: Cleanup green environment
        if: success()
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.PROD_HOST }}
          username: ${{ secrets.PROD_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            # 等待 5 分鐘確認沒問題後再關閉 green
            sleep 300
            docker-compose -f docker-compose.green.yml down

      # 部署失敗時通知
      - name: Notify on failure
        if: failure()
        uses: slackapi/slack-github-action@v1
        with:
          webhook-url: ${{ secrets.SLACK_WEBHOOK }}
          payload: |
            {
              "text": "🚨 Production deployment failed",
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "*Production Deployment Failed*\nCommit: `${{ github.sha }}`\nActor: @${{ github.actor }}\n<${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}|View Run>"
                  }
                }
              ]
            }

# ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
# 配置說明
# ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#
# 必要的 GitHub Secrets：
# ========================
# 如果使用 SSH 部署：
#   - DEV_HOST: 開發環境主機 IP/域名
#   - DEV_USER: SSH 用戶名
#   - PROD_HOST: 生產環境主機 IP/域名
#   - PROD_USER: SSH 用戶名
#   - SSH_PRIVATE_KEY: SSH 私鑰
#
# 如果使用雲端服務：
#   - RAILWAY_TOKEN: Railway 部署 token
#   - 或其他雲端服務的 credentials
#
# 通知（可選）：
#   - SLACK_WEBHOOK: Slack webhook URL
#
# 環境保護規則：
# ==============
# 在 GitHub 設定生產環境保護：
# Settings > Environments > production > Protection rules
#   - Required reviewers（需要審批）
#   - Wait timer（等待時間）
#   - Deployment branches（限制分支）
#
# 使用技巧：
# =========
# 1. Docker 映像標記策略：
#    - main-abc123f: 生產版本（帶 git SHA）
#    - develop-def456a: 開發版本
#    - latest: 最新穩定版本
#
# 2. 快取策略：
#    - 使用 GitHub Actions cache 加速構建
#    - mode=max: 快取所有層
#
# 3. 安全掃描：
#    - Trivy 掃描容器漏洞
#    - 發現 High/Critical 漏洞時失敗
#
# 4. 藍綠部署：
#    - 零停機時間
#    - 快速回退
#    - 需要雙倍資源
#
# 5. 健康檢查：
#    - 帶重試機制
#    - 超時設置
#    - 失敗時阻止部署
